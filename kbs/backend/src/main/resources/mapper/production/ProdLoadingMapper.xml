<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kimbap.kbs.production.mapper.ProdLoadingMapper">
  <!-- 제품 적재 대기 목록 전체 조회 (적재처리되지 않은 제품만) -->
  <select id="getAllProdLoadingWaitList" resultType="com.kimbap.kbs.production.service.ProdInboundVO">  
    SELECT 
      pi.prod_inbo_cd,
      pi.pcode,
      pi.prod_ver_cd,
      pi.lot_no,
      pi.inbo_status,
      pi.inbo_qty,
      pi.produ_prod_cd,
      pi.inbo_dt,
      pi.fcode,
      pi.fac_ver_cd,
      -- 정교한 적재대기 수량 계산
      -- (입고수량 - 총출고수량) - 현재적재수량 = 적재 필요 수량
      GREATEST(0, 
          (pi.inbo_qty - COALESCE(total_released.total_rel_qty, 0)) -     -- 현재 보유 재고
          COALESCE(current_loaded.current_stock_qty, 0)                   -- 현재 적재된 수량
      ) AS total_qty,
      p.prod_name,
      p.sto_temp,
      p.unit,
      p.is_used,
      p.reg_dt,
      f.fac_name,
      f.op_status,
      f.address,
      -- 디버깅 및 상태 확인용 추가 컬럼들
      pi.inbo_qty as original_inbo_qty,                                   -- 원본 입고수량
      COALESCE(total_released.total_rel_qty, 0) as total_released_qty,    -- 총 출고수량
      (pi.inbo_qty - COALESCE(total_released.total_rel_qty, 0)) as current_inventory,  -- 현재 보유 재고
      COALESCE(current_loaded.current_stock_qty, 0) as current_loaded_qty,             -- 현재 적재수량
      COALESCE(current_loaded.loaded_areas_count, 0) as loaded_areas_count             -- 적재된 구역 수
    FROM prod_inbo pi
    INNER JOIN product p ON pi.pcode = p.pcode AND pi.prod_ver_cd = p.prod_ver_cd
    INNER JOIN factory f ON pi.fcode = f.fcode AND pi.fac_ver_cd = f.fac_ver_cd
    -- LOT별 총 출고수량 조회 (prod_rel 테이블)
    LEFT JOIN (
      SELECT 
          pr.lot_no, 
          SUM(pr.rel_qty) as total_rel_qty,
          COUNT(*) as release_count
      FROM prod_rel pr
      GROUP BY pr.lot_no
    ) total_released ON total_released.lot_no = pi.lot_no
    -- 제품입고별 현재 적재수량 조회 (ware_stock 테이블)
    LEFT JOIN (
      SELECT 
        ws.prod_inbo_cd, 
        SUM(ws.qty) as current_stock_qty,
        COUNT(DISTINCT ws.ware_area_cd) as loaded_areas_count
      FROM ware_stock ws
      <![CDATA[
      WHERE ws.qty > 0  --  출고로 인해 0이 된 것은 제외
      ]]>
      GROUP BY ws.prod_inbo_cd
    ) current_loaded ON current_loaded.prod_inbo_cd = pi.prod_inbo_cd
    WHERE pi.inbo_status = 'b4'        -- 입고완료 상태
      AND f.op_status = 'r1'           -- 활성 공장
      <![CDATA[
      -- 적재가 필요한 수량이 있는 경우만 표시
      AND GREATEST(0, 
          (pi.inbo_qty - COALESCE(total_released.total_rel_qty, 0)) -
          COALESCE(current_loaded.current_stock_qty, 0)
        ) > 0
      -- 추가 조건: 아직 재고가 남아있는 경우만 (완전 출고되지 않은 LOT)
      AND (pi.inbo_qty - COALESCE(total_released.total_rel_qty, 0)) > 0
      ]]>
    ORDER BY pi.inbo_dt DESC, pi.prod_inbo_cd DESC
  </select>
  <!-- 구역별 현재 적재 상황 조회 -->
  <select id="getWarehouseAreaStock" parameterType="string" resultType="com.kimbap.kbs.production.service.ProdInboundVO">
    SELECT 
      ws.wslcode,
      ws.ware_area_cd,
      ws.prod_inbo_cd,
      ws.item_type,
      ws.inbo_dt,
      ws.regi,
      ws.qty,
      ws.unit,
      pi.pcode,
      p.prod_name
    FROM ware_stock ws
    LEFT JOIN prod_inbo pi ON ws.prod_inbo_cd = pi.prod_inbo_cd
    LEFT JOIN product p ON pi.pcode = p.pcode AND pi.prod_ver_cd = p.prod_ver_cd
    WHERE ws.ware_area_cd = #{wareAreaCd}
    ORDER BY ws.inbo_dt DESC
  </select>
  <!-- 구역별 현재 적재량 합계 조회 -->
  <select id="getCurrentVolumeByArea" parameterType="string" resultType="int">
    SELECT COALESCE(SUM(qty), 0) as current_volume
    FROM ware_stock
    WHERE ware_area_cd = #{wareAreaCd}
  </select>
  <!-- 구역에 적재된 제품코드 조회 -->
  <select id="getCurrentProductByArea" parameterType="string" resultType="string">
    SELECT DISTINCT pi.pcode
    FROM ware_stock ws
    INNER JOIN prod_inbo pi ON ws.prod_inbo_cd = pi.prod_inbo_cd
    WHERE ws.ware_area_cd = #{wareAreaCd}
    AND ROWNUM = 1  -- 첫 번째 제품코드만 반환
  </select>
  <!-- 동일한 자재가 적재된 다른 구역들 조회 -->
  <select id="getSameProductAreas" resultType="com.kimbap.kbs.production.service.ProdInboundVO">
      SELECT DISTINCT
        ws.ware_area_cd,
        wd.area_row,
        wd.area_col,
        wd.area_floor,
        wd.vol,
        NVL(area_stock.current_volume, 0) as current_volume,
        (wd.vol - NVL(area_stock.current_volume, 0)) as available_volume
      FROM ware_stock ws
      INNER JOIN prod_inbo pi ON ws.prod_inbo_cd = pi.prod_inbo_cd
      INNER JOIN ware_d wd ON ws.ware_area_cd = wd.ware_area_cd
      INNER JOIN warehouse w ON wd.wcode = w.wcode AND wd.ware_ver_cd = w.ware_ver_cd
      LEFT JOIN (
        SELECT ware_area_cd, SUM(qty) as current_volume
        FROM ware_stock
        GROUP BY ware_area_cd
      ) area_stock ON ws.ware_area_cd = area_stock.ware_area_cd
      WHERE pi.pcode = #{pcode}
      AND w.fcode = #{fcode}
      AND ws.ware_area_cd != #{excludeAreaCd}
      AND (wd.vol - NVL(area_stock.current_volume, 0)) > 0  -- 잔여 용량이 있는 곳만
      ORDER BY available_volume DESC
  </select>
  <!-- product 테이블에서 자재 정보 조회 -->
  <select id="getProductInfo" parameterType="string" resultType="com.kimbap.kbs.production.service.ProdInboundVO">
    SELECT 
      pcode,
      prod_ver_cd,
      prod_name,
      prod_unit_price,
      wei,
      unit,
      edate,
      sto_temp,
      safe_stock,
      pac_unit,
      cha_rea,
      is_used,
      reg_dt,
      prime_cost,
      note,
      regi,
      modi
    FROM product
    WHERE pcode = #{pcode}
    AND is_used = 'f1'
  </select>
  <!-- 창고재고목록코드 마지막 순번 조회 -->
  <select id="getLastWareStockSequence" parameterType="string" resultType="int">
    SELECT COALESCE(MAX(TO_NUMBER(SUBSTR(wslcode, -3))), 0) as last_seq
    FROM ware_stock
    WHERE wslcode LIKE 'WStock-' || #{datePattern} || '-%'
  </select>
  <!-- 자재 적재 처리 (ware_stock 테이블에 INSERT) -->
  <insert id="insertWareStock" parameterType="com.kimbap.kbs.production.service.ProdInboundVO">
    <!-- 디버그: 실행 전 파라미터 확인 -->
    INSERT INTO ware_stock (
      wslcode,
      ware_area_cd,
      mate_inbo_cd,
      prod_inbo_cd,
      item_type,
      inbo_dt,
      regi,
      qty,
      unit
    ) VALUES (
      #{wslcode},
      #{wareAreaCd},
      NULL,                    -- 제품입고코드는 NULL (자재이므로)
      #{prodInboCd},           
      'h3',                    -- 자재타입에 따라 동적 설정
      #{inboDt},
      #{regi},
      #{qty},
      #{unit}
    )
  </insert>
  <!-- 특정 창고의 구역 정보 조회 (층별) -->
  <select id="getWarehouseAreasByFloor" resultType="com.kimbap.kbs.production.service.ProdInboundVO">
    SELECT 
        wd.ware_area_cd,
        wd.area_row,
        wd.area_col,
        wd.area_floor,
        wd.vol,
        wd.is_used,
        wd.wcode,
        wd.ware_ver_cd
    FROM ware_d wd
    WHERE wd.wcode = #{wcode}
    AND wd.area_floor = #{floor}
    AND wd.is_used = 'f1'    -- 활성화된 구역만
    ORDER BY wd.area_row ASC, wd.area_col ASC
  </select>
</mapper>

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kimbap.kbs.production.mapper.ProdRequestMapper">
    <!-- 생산요청 조건 검색 -->
    <select id="selectProdRequestByCondition" parameterType="ProdRequestVO" resultType="ProdRequestVO">
        SELECT
            pr.produ_req_cd,
            pp.fcode,
            pp.fac_ver_cd,
            pr.req_dt,
            pr.requ,
            pr.pr_req_status,
            pr.produ_plan_cd,
            pr.deli_dt,
            f.fac_name,
            pr.note,
            e.emp_name,
            SUM(prr.req_qty) AS sum_req_qty,
            MIN(p.unit) KEEP (DENSE_RANK FIRST ORDER BY pr.produ_req_cd) AS first_unit
        FROM production_req pr
        JOIN prod_plan pp
            ON pr.produ_plan_cd = pp.produ_plan_cd
        JOIN factory f
            ON pp.fcode = f.fcode
            AND pp.fac_ver_cd = f.fac_ver_cd
        JOIN employee e
            ON pr.requ = e.emp_cd
        LEFT JOIN prod_req prr
            ON pr.produ_req_cd = prr.produ_req_cd
        JOIN product p
            ON prr.pcode = p.pcode
            AND prr.prod_ver_cd = p.prod_ver_cd
        <where>
            <if test="produReqCd != null and produReqCd != ''">
            AND LOWER(pr.produ_plan_cd) LIKE '%' || LOWER(#{produReqCd}) || '%'
            </if>
            <if test="reqDtStart != null">
            AND pr.req_dt &gt;= #{reqDtStart}
            </if>
            <if test="reqDtEnd != null">
            AND pr.req_dt &lt;= #{reqDtEnd}
            </if>
            <if test="fcode != null and facVerCd != null">
            AND pp.fcode = #{fcode}
            AND pp.fac_ver_cd = #{facVerCd}
            </if>
        </where>
        GROUP BY 
            pr.produ_req_cd,
            pp.fcode,
            pp.fac_ver_cd,
            pr.req_dt,
            pr.requ,
            pr.pr_req_status,
            pr.produ_plan_cd,
            pr.deli_dt,
            f.fac_name,
            pr.note,
            e.emp_name
    </select>
    <!-- 생산요청상세 조건 검색 -->
    <select id="selectDetailsByProduReqCd"  parameterType="String" resultType="ProdRequestDetailVO">
        SELECT
            pr.produ_prod_cd,
            pr.pcode,
            pr.prod_ver_cd,
            pr.produ_req_cd,
            pr.req_qty,
            pr.seq,
            p.unit,
            p.prod_name,
            pr.ex_produ_dt
        FROM prod_req pr
        JOIN product p
            ON pr.pcode = p.pcode
            AND pr.prod_ver_cd = p.prod_ver_cd
        WHERE produ_req_cd = #{produReqCd}
        ORDER BY produ_prod_cd
    </select>
    <!-- 제품목록 검색 -->
    <select id="selectAllProducts" resultType="ProdsVO">
        SELECT
            pcode,
            prod_ver_cd,
            prod_name,
            prod_unit_price,
            wei,
            unit,
            edate,
            sto_temp,
            safe_stock,
            pac_unit,
            cha_rea,
            is_used,
            note,
            prime_cost,
            regi,
            modi
        FROM (
            SELECT 
                p.*,
                ROW_NUMBER() OVER (PARTITION BY p.pcode ORDER BY p.prod_ver_cd DESC) AS rn
            FROM product p
            WHERE p.is_used = 'f1'
        )
        WHERE rn = 1
    </select>
    <!-- 생산요청 저장 영역 ===================================== -->
    <!-- 생산요청번호 자동 생성 -->
    <select id="getNewProduReqCd" resultType="string">
        SELECT fn_create_produ_req_cd() FROM dual
    </select>

    <!-- 상세코드 자동 생성 -->
    <select id="getNewProduProdCd" resultType="string">
        SELECT fn_create_pk_code('prod_req') FROM dual
    </select>
    <!-- 마스터 insert -->
    <insert id="insertProductionReq">
        INSERT INTO production_req (
            produ_req_cd, req_dt, requ,
            pr_req_status, produ_plan_cd, deli_dt, note
        ) VALUES (
            #{produReqCd}, #{reqDt}, #{requ},
            'b1', #{produPlanCd}, #{deliDt}, #{note}
        )
    </insert>
    <!-- 마스터 update -->
    <update id="updateProductionReq" parameterType="ProdRequestVO">
        UPDATE production_req
        SET
            produ_req_cd = #{produReqCd},
            req_dt = #{reqDt},
            requ = #{requ},
            produ_plan_cd = #{produPlanCd},
            deli_dt = #{deliDt},
            note = #{note}
        WHERE produ_req_cd = #{produReqCd}
    </update>
    <!-- 상세 insert -->
    <insert id="insertProdReqDetail">
        INSERT INTO prod_req (
            produ_prod_cd, pcode,
            prod_ver_cd, produ_req_cd, req_qty, seq, ex_produ_dt
        ) VALUES (
            #{produProdCd}, #{pcode},
            #{prodVerCd}, #{produReqCd}, #{reqQty}, #{seq}, #{exProduDt}
        )
    </insert>
    <!-- 상세 update -->
    <update id="updateProdReqDetail" parameterType="ProdRequestDetailVO">
        UPDATE prod_req
        SET
            produ_prod_cd = #{produProdCd},
            pcode = #{pcode},
            prod_ver_cd = #{prodVerCd},
            produ_req_cd = #{produReqCd},
            req_qty = #{reqQty},
            seq = #{seq},
            ex_produ_dt = #{exProduDt}
        WHERE produ_prod_cd = #{produProdCd}
    </update>
    <!-- 상세 delete -->
    <delete id="deleteProdReqDetail" parameterType="string">
        DELETE FROM prod_req
        WHERE produ_prod_cd = #{produProdCd}
    </delete>
    <!-- ====================================================== -->

    <!-- 생산요청 삭제 영역 ===================================== -->
    <!-- 생산요청코드 기준 생산계획상세 삭제 -->
    <delete id="deleteProdReqDetailByReqCd" parameterType="String">
        DELETE FROM prod_req
        WHERE produ_req_cd = #{produReqCd}
    </delete>
    <!-- 생산요청코드 기준 삭제 -->
    <delete id="deleteProductionReq" parameterType="String">
        DELETE FROM production_req
        WHERE produ_req_cd = #{produReqCd}
    </delete>
    <!-- ====================================================== -->

    <!-- 생산요청 시 자동 자재출고, 제품입고 영역 ================ -->
    <!-- 자재출고코드 (MATO-YYYYMM-0001) -->
    <select id="getNewMateRelCd" resultType="string">
        SELECT fn_create_mate_rel_cd() FROM dual
    </select>
    <!-- 완제품 입고코드 (IN-YYYYMMDD-0001) -->
    <select id="getNewProdInboCd" resultType="string">
        SELECT fn_create_prod_inbo_cd() FROM dual
    </select>
    <!-- 완제품 입고코드 최근 값 가져오기 -->
    <select id="selectTodayProdInboSeq" resultType="int">
        SELECT NVL(MAX(TO_NUMBER(SUBSTR(prod_inbo_cd, 14))), 0)
        FROM prod_inbo
        WHERE SUBSTR(prod_inbo_cd, 4, 8) = TO_CHAR(SYSDATE, 'YYYYMMDD')
    </select>
    <!-- 완제품 LOT 번호 (LOT-300-YYYYMMDD-n) -->
    <select id="getNewLotNo300" resultType="string">
        SELECT fn_create_lot_no_300() FROM dual
    </select>
    <!-- BOM 구성 자재 조회 -->
    <select id="selectBomMaterials" resultType="BomDetailVO">
        SELECT bd.mcode, bd.mate_ver_cd, bd.need_qty, bd.unit
        FROM bom b
        JOIN bom_d bd ON b.bcode = bd.bcode AND b.bom_ver_cd = bd.bom_ver_cd
        WHERE b.pcode = #{pcode}
        AND b.prod_ver_cd = #{prodVerCd}
        AND b.is_used = 'f1'
        AND bd.is_used = 'f1'
    </select>
    <!-- 재고 목록 조회 (LOT 오름차순) -->
    <select id="selectAvailableStocks" resultType="WaStockVO">
        SELECT ws.wslcode, ws.qty, mi.lot_no
        FROM ware_stock ws
        JOIN mate_inbo mi ON ws.mate_inbo_cd = mi.mate_inbo_cd
        WHERE mi.mcode = #{mcode}
        AND mi.mate_ver_cd = #{mateVerCd}
        <![CDATA[
        AND ws.qty > 0
        ]]>
        ORDER BY mi.lot_no ASC
    </select>
    <!-- 재고 차감 -->
    <update id="decreaseWareStock">
        UPDATE ware_stock
        SET qty = qty - #{useQty}
        WHERE wslcode = #{wslcode}
    </update>
    <!-- 자재출고 INSERT -->
    <insert id="insertMateRel" parameterType="MateReleaseVO">
        INSERT INTO mate_rel (
            mate_rel_cd, produ_prod_cd, mcode, mate_ver_cd, wslcode, lot_no,
            rel_qty, unit, rel_dt, rel_type, mname, cre_dt
        ) VALUES (
            #{mateRelCd}, #{produProdCd}, #{mcode}, #{mateVerCd}, #{wslcode}, #{lotNo},
            #{relQty}, #{unit}, #{relDt}, #{relType}, #{mname}, #{creDt}
        )
    </insert>
    <!-- 완제품 입고 INSERT -->
    <insert id="insertProdInbo" parameterType="ProdInboundVO">
        INSERT INTO prod_inbo (
            prod_inbo_cd, pcode, prod_ver_cd, lot_no, inbo_status,
            inbo_qty, produ_prod_cd, inbo_dt, fcode, fac_ver_cd
        ) VALUES (
            #{prodInboCd}, #{pcode}, #{prodVerCd}, #{lotNo}, #{inboStatus},
            #{inboQty}, #{produProdCd}, #{inboDt}, #{fcode}, #{facVerCd}
        )
    </insert>
    <!-- ====================================================== -->
</mapper>

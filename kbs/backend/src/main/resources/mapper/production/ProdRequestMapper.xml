<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kimbap.kbs.production.mapper.ProdRequestMapper">
    <!-- 생산요청 조건 검색 -->
    <select id="selectProdRequestByCondition" parameterType="ProdRequestVO" resultType="ProdRequestVO">
        SELECT
            pr.produ_req_cd,
            pp.fcode,
            pp.fac_ver_cd,
            pr.req_dt,
            pr.pr_req_status,
            pr.produ_plan_cd,
            f.fac_name,
            pr.note,
            SUM(prr.req_qty) AS sum_req_qty,
            MIN(p.unit) KEEP (DENSE_RANK FIRST ORDER BY pr.produ_req_cd) AS first_unit
        FROM production_req pr
        JOIN prod_plan pp
            ON pr.produ_plan_cd = pp.produ_plan_cd
        JOIN factory f
            ON pp.fcode = f.fcode
            AND pp.fac_ver_cd = f.fac_ver_cd
        LEFT JOIN prod_req prr
            ON pr.produ_req_cd = prr.produ_req_cd
        JOIN product p
            ON prr.pcode = p.pcode
            AND prr.prod_ver_cd = p.prod_ver_cd
        <where>
            <if test="produReqCd != null and produReqCd != ''">
            AND LOWER(pr.produ_plan_cd) LIKE '%' || LOWER(#{produReqCd}) || '%'
            </if>
            <if test="reqDtStart != null">
            AND pr.req_dt &gt;= #{reqDtStart}
            </if>
            <if test="reqDtEnd != null">
            AND pr.req_dt &lt;= #{reqDtEnd}
            </if>
            <if test="fcode != null and facVerCd != null">
            AND pp.fcode = #{fcode}
            AND pp.fac_ver_cd = #{facVerCd}
            </if>
        </where>
        GROUP BY 
            pr.produ_req_cd,
            pp.fcode,
            pp.fac_ver_cd,
            pr.req_dt,
            pr.pr_req_status,
            pr.produ_plan_cd,
            f.fac_name,
            pr.note
    </select>
    <!-- 생산계획상세 조건 검색 -->
    <select id="selectDetailsByProduReqCd"  parameterType="String" resultType="ProdRequestDetailVO">
        SELECT
            pr.produ_prod_cd,
            pr.pcode,
            pr.prod_ver_cd,
            pr.produ_req_cd,
            pr.req_qty,
            pr.seq,
            p.unit,
            p.prod_name
        FROM prod_req pr
        JOIN product p
            ON pr.pcode = p.pcode
            AND pr.prod_ver_cd = p.prod_ver_cd
        WHERE produ_req_cd = #{produReqCd}
        ORDER BY produ_prod_cd
    </select>
    <!-- 제품목록 검색 -->
    <select id="selectAllProducts" resultType="ProdsVO">
        SELECT
            pcode,
            prod_ver_cd,
            prod_name,
            prod_unit_price,
            wei,
            unit,
            edate,
            sto_temp,
            safe_stock,
            pac_unit,
            cha_rea,
            is_used,
            note,
            prime_cost,
            regi,
            modi
        FROM (
            SELECT 
                p.*,
                ROW_NUMBER() OVER (PARTITION BY p.pcode ORDER BY p.prod_ver_cd DESC) AS rn
            FROM product p
            WHERE p.is_used = 'f1'
        )
        WHERE rn = 1
    </select>
    <!-- 생산계획 저장 영역 ===================================== -->
    <!-- 생산계획번호 자동 생성 -->
    <select id="getNewProdPlanCd" resultType="string">
        SELECT fn_create_prod_plan_cd() FROM dual
    </select>

    <!-- 상세코드 자동 생성 -->
    <select id="getNewPpdcode" resultType="string">
        SELECT fn_create_pk_code('prod_plan_d') FROM dual
    </select>
    <!-- 마스터 insert -->
    <insert id="insertProdPlan">
        INSERT INTO prod_plan (
            produ_plan_cd, fcode, fac_ver_cd,
            plan_start_dt, plan_end_dt, mname, plan_dt, note
        ) VALUES (
            #{produPlanCd}, #{fcode}, #{facVerCd},
            #{planStartDt}, #{planEndDt}, #{mname}, #{planDt}, #{note}
        )
    </insert>
    <!-- 마스터 update -->
    <update id="updateProdPlan" parameterType="ProdPlanVO">
        UPDATE prod_plan
        SET
            fcode = #{fcode},
            fac_ver_cd = #{facVerCd},
            plan_dt = #{planDt},
            plan_start_dt = #{planStartDt},
            plan_end_dt = #{planEndDt},
            mname = #{mname},
            note = #{note}
        WHERE produ_plan_cd = #{produPlanCd}
    </update>
    <!-- 상세 insert -->
    <insert id="insertProdPlanDetail">
        INSERT INTO prod_plan_d (
            ppdcode, produ_plan_cd, pcode,
            prod_ver_cd, plan_qty, unit, ex_produ_dt, seq
        ) VALUES (
            #{ppdcode}, #{produPlanCd}, #{pcode},
            #{prodVerCd}, #{planQty}, #{unit}, #{exProduDt}, #{seq}
        )
    </insert>
    <!-- 상세 update -->
    <update id="updateProdPlanDetail" parameterType="ProdPlanDetailVO">
        UPDATE prod_plan_d
        SET
            pcode = #{pcode},
            prod_ver_cd = #{prodVerCd},
            plan_qty = #{planQty},
            unit = #{unit},
            ex_produ_dt = #{exProduDt},
            seq = #{seq}
        WHERE ppdcode = #{ppdcode}
    </update>
    <!-- 상세 delete -->
    <delete id="deleteProdPlanDetail" parameterType="string">
        DELETE FROM prod_plan_d
        WHERE ppdcode = #{ppdcode}
    </delete>
    <!-- ====================================================== -->
    
    <!-- 생산계획 삭제 영역 ===================================== -->
    <!-- 생산계획코드 기준 생산계획상세 삭제 -->
    <delete id="deleteProdPlanDetailByPlanCd" parameterType="String">
        DELETE FROM prod_plan_d
        WHERE produ_plan_cd = #{produPlanCd}
    </delete>
    <!-- 생산계획코드 기준 삭제 -->
    <delete id="deleteProdPlan" parameterType="String">
        DELETE FROM prod_plan
        WHERE produ_plan_cd = #{produPlanCd}
    </delete>
    <!-- ====================================================== -->
</mapper>

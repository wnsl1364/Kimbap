<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kimbap.kbs.production.mapper.ProdPlanMapper">
    <!-- 생산계획 전체 조회 -->
    <select id="selectProdPlans" resultType="ProdPlanVO">
        SELECT * FROM prod_plan
    </select>

    <!-- 생산계획 조건 검색 -->
    <select id="selectProdPlansByCondition" parameterType="ProdPlanVO" resultType="ProdPlanVO">
        SELECT
            pp.produ_plan_cd,
            pp.fcode,
            pp.fac_ver_cd,
            pp.plan_dt,
            pp.plan_start_dt,
            pp.plan_end_dt,
            f.fac_name,
            pp.note,
            SUM(ppd.plan_qty) AS sum_plan_qty,
            MIN(ppd.unit) KEEP (DENSE_RANK FIRST ORDER BY ppd.ppdcode) AS first_unit
        FROM prod_plan pp
        JOIN factory f
            ON pp.fcode = f.fcode
            AND pp.fac_ver_cd = f.fac_ver_cd
        LEFT JOIN prod_plan_d ppd
            ON pp.produ_plan_cd = ppd.produ_plan_cd
        <where>
            <if test="produPlanCd != null and produPlanCd != ''">
            AND LOWER(pp.produ_plan_cd) LIKE '%' || LOWER(#{produPlanCd}) || '%'
            </if>
            <if test="planDtStart != null">
            AND pp.plan_dt &gt;= #{planDtStart}
            </if>
            <if test="planDtEnd != null">
            AND pp.plan_dt &lt;= #{planDtEnd}
            </if>
            <if test="periodStartDt != null">
            AND pp.plan_start_dt &gt;= #{periodStartDt}
            </if>
            <if test="periodEndDt != null">
            AND pp.plan_end_dt &lt;= #{periodEndDt}
            </if>
            <if test="fcode != null and facVerCd != null">
            AND pp.fcode = #{fcode}
            AND pp.fac_ver_cd = #{facVerCd}
            </if>
        </where>
        GROUP BY
            pp.produ_plan_cd,
            pp.fcode,
            pp.fac_ver_cd,
            pp.plan_dt,
            pp.plan_start_dt,
            pp.plan_end_dt,
            f.fac_name,
            pp.note
    </select>
    <!-- 생산계획상세 조건 검색 -->
    <select id="selectDetailsByPlanCd"  parameterType="String" resultType="ProdPlanDetailVO">
        SELECT
            pp.ppdcode,
            pp.produ_plan_cd,
            pp.pcode,
            pp.prod_ver_cd,
            pp.plan_qty,
            pp.unit,
            pp.ex_produ_dt,
            pp.seq,
            p.prod_name,
            COALESCE(req_summary.total_req_qty, 0) AS total_req_qty,
            (pp.plan_qty - COALESCE(req_summary.total_req_qty, 0)) AS remaining_qty
        FROM prod_plan_d pp
        JOIN product p
            ON pp.pcode = p.pcode
            AND pp.prod_ver_cd = p.prod_ver_cd
        LEFT JOIN (
            SELECT
                pr.pcode,
                pr.prod_ver_cd,
                req.produ_plan_cd,
                SUM(pr.req_qty) AS total_req_qty
            FROM prod_req pr
            JOIN production_req req ON pr.produ_req_cd = req.produ_req_cd
            WHERE req.produ_plan_cd = #{produPlanCd}
            GROUP BY pr.pcode, pr.prod_ver_cd, req.produ_plan_cd
        ) req_summary 
            ON pp.pcode = req_summary.pcode 
            AND pp.prod_ver_cd = req_summary.prod_ver_cd
            AND pp.produ_plan_cd = req_summary.produ_plan_cd
        WHERE pp.produ_plan_cd = #{produPlanCd}
        ORDER BY pp.ppdcode
    </select>
    <!-- 제품목록 검색 -->
    <select id="selectAllProducts" resultType="ProdsVO">
        SELECT
            pcode,
            prod_ver_cd,
            prod_name,
            prod_unit_price,
            wei,
            unit,
            edate,
            sto_temp,
            safe_stock,
            pac_unit,
            cha_rea,
            is_used,
            note,
            prime_cost,
            regi,
            modi
        FROM (
            SELECT 
                p.*,
                ROW_NUMBER() OVER (PARTITION BY p.pcode ORDER BY p.prod_ver_cd DESC) AS rn
            FROM product p
            WHERE p.is_used = 'f1'
        )
        WHERE rn = 1
    </select>
    <!-- 생산계획 저장 영역 ===================================== -->
    <!-- 생산계획번호 자동 생성 -->
    <select id="getNewProdPlanCd" resultType="string">
        SELECT fn_create_prod_plan_cd() FROM dual
    </select>

    <!-- 상세코드 자동 생성 -->
    <select id="getNewPpdcode" resultType="string">
        SELECT fn_create_pk_code('prod_plan_d') FROM dual
    </select>
    <!-- 마스터 insert -->
    <insert id="insertProdPlan">
        INSERT INTO prod_plan (
            produ_plan_cd, fcode, fac_ver_cd,
            plan_start_dt, plan_end_dt, mname, plan_dt, note
        ) VALUES (
            #{produPlanCd}, #{fcode}, #{facVerCd},
            #{planStartDt}, #{planEndDt}, #{mname}, #{planDt}, #{note}
        )
    </insert>
    <!-- 마스터 update -->
    <update id="updateProdPlan" parameterType="ProdPlanVO">
        UPDATE prod_plan
        SET
            fcode = #{fcode},
            fac_ver_cd = #{facVerCd},
            plan_dt = #{planDt},
            plan_start_dt = #{planStartDt},
            plan_end_dt = #{planEndDt},
            mname = #{mname},
            note = #{note}
        WHERE produ_plan_cd = #{produPlanCd}
    </update>
    <!-- 상세 insert -->
    <insert id="insertProdPlanDetail">
        INSERT INTO prod_plan_d (
            ppdcode, produ_plan_cd, pcode,
            prod_ver_cd, plan_qty, unit, ex_produ_dt, seq
        ) VALUES (
            #{ppdcode}, #{produPlanCd}, #{pcode},
            #{prodVerCd}, #{planQty}, #{unit}, #{exProduDt}, #{seq}
        )
    </insert>
    <!-- 상세 update -->
    <update id="updateProdPlanDetail" parameterType="ProdPlanDetailVO">
        UPDATE prod_plan_d
        SET
            pcode = #{pcode},
            prod_ver_cd = #{prodVerCd},
            plan_qty = #{planQty},
            unit = #{unit},
            ex_produ_dt = #{exProduDt},
            seq = #{seq}
        WHERE ppdcode = #{ppdcode}
    </update>
    <!-- 상세 delete -->
    <delete id="deleteProdPlanDetail" parameterType="string">
        DELETE FROM prod_plan_d
        WHERE ppdcode = #{ppdcode}
    </delete>
    <!-- ====================================================== -->
    
    <!-- 생산계획 삭제 영역 ===================================== -->
    <!-- 생산계획코드 기준 생산계획상세 삭제 -->
    <delete id="deleteProdPlanDetailByPlanCd" parameterType="String">
        DELETE FROM prod_plan_d
        WHERE produ_plan_cd = #{produPlanCd}
    </delete>
    <!-- 생산계획코드 기준 삭제 -->
    <delete id="deleteProdPlan" parameterType="String">
        DELETE FROM prod_plan
        WHERE produ_plan_cd = #{produPlanCd}
    </delete>
    <!-- ====================================================== -->

    <!-- MRP 등록 영역 ===================================== -->
    <!-- MRP 코드 생성 (예: MRP-YYYYMMDD-001) -->
    <select id="getNewMrpCd" resultType="String">
        SELECT 'MRP-' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' || 
            LPAD(NVL(MAX(TO_NUMBER(SUBSTR(mrp_cd, 14))), 0) + 1, 3, '0')
        FROM mrp
        WHERE mrp_cd LIKE 'MRP-' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-%'
    </select>

    <insert id="insertMrp" parameterType="MrpVO">
        INSERT INTO mrp (mrp_cd, plan_gene_dt, produ_start_dt, note, regi, produ_plan_cd)
        VALUES (
            #{mrpCd},
            #{planGeneDt},
            #{produStartDt},
            #{note},
            #{regi},
            #{produPlanCd}
        )
    </insert>

    <insert id="insertMrpDetail" parameterType="MrpDetailVO">
        INSERT INTO mrp_d (mrp_d_cd, mcode, mate_ver_cd, mrp_cd, unit, required_qty, field)
        VALUES (
            fn_create_pk_code('mrp_d'),
            #{mcode},
            #{mateVerCd},
            #{mrpCd},
            #{unit},
            #{requiredQty},
            #{field}
        )
    </insert>

    <!-- 기존 BOM 자재 조회 그대로 재사용 -->
    <select id="selectBomMaterials" resultType="BomDetailVO">
        SELECT
            bd.mcode,
            bd.mate_ver_cd,
            bd.need_qty,
            bd.unit,
            m.mate_name
        FROM bom b
        JOIN bom_d bd ON b.bcode = bd.bcode AND b.bom_ver_cd = bd.bom_ver_cd
        JOIN material m ON bd.mcode = m.mcode AND bd.mate_ver_cd = m.mate_ver_cd
        WHERE b.pcode = #{pcode}
        AND b.prod_ver_cd = #{prodVerCd}
        AND b.is_used = 'f1'
        AND bd.is_used = 'f1'
    </select>

    <!-- 현재고 총합 -->
    <select id="selectTotalStockByMate" resultType="java.math.BigDecimal">
        SELECT NVL(SUM(ws.qty), 0)
        FROM ware_stock ws
        JOIN mate_inbo mi ON ws.mate_inbo_cd = mi.mate_inbo_cd
        WHERE mi.mcode = #{mcode}
        AND mi.mate_ver_cd = #{mateVerCd}
    </select>
    <!-- ====================================================== -->

    <!-- 발주서 등록 영역 ===================================== -->
    <!-- 발주서 코드 생성 -->
    <!-- <select id="getNewPurcCd" resultType="String">
        SELECT 'PURC-' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' || LPAD(NVL(MAX(SUBSTR(purc_cd, 14)), 0) + 1, 3, '0')
        FROM purc_ord
        WHERE TO_CHAR(ord_dt, 'YYYYMMDD') = TO_CHAR(SYSDATE, 'YYYYMMDD')
    </select> -->
    <select id="getNewPurcCd" resultType="String">
        SELECT 'PURC-' || LPAD(
            NVL(
                MAX(
                    CASE 
                        WHEN REGEXP_LIKE(SUBSTR(purc_cd, 6), '^\d+$') 
                        THEN TO_NUMBER(SUBSTR(purc_cd, 6))
                        ELSE 0 
                    END
                ), 
                0
            ) + 1, 
            3, 
            '0'
        )
        FROM purc_ord
    </select>
    
    <!-- 발주서 상세 코드 생성 -->
    <select id="getNewPurcDCd" resultType="String">
        SELECT 'PURC-D-' || LPAD(
            NVL(
                MAX(
                    CASE 
                        WHEN REGEXP_LIKE(SUBSTR(purc_d_cd, 9), '^\d+$') 
                        THEN TO_NUMBER(SUBSTR(purc_d_cd, 9))
                        ELSE 0 
                    END
                ), 
                0
            ) + 1, 
            3, 
            '0'
        )
        FROM purc_ord_d
    </select>
    <!-- 발주서 등록 -->
    <insert id="insertPurchaseOrder" parameterType="PurcOrdVO">
        INSERT INTO purc_ord (purc_cd, ord_dt, regi, purc_status, ord_total_amount)
        VALUES (
            #{purcCd},
            #{ordDt},
            #{regi},
            #{purcStatus},
            #{ordTotalAmount}
        )
    </insert>
    
    <!-- 발주서 상세 등록 -->
    <insert id="insertPurchaseOrderDetail" parameterType="PurcOrdDetailVO">
        INSERT INTO purc_ord_d (
            purc_d_cd, purc_cd, mcode, mate_ver_cd, purc_qty, 
            unit, unit_price, ex_deli_dt, note, purc_d_status, 
            mate_cp_cd, curr_qty
        ) VALUES (
            #{purcDCd},
            #{purcCd},
            #{mcode},
            #{mateVerCd},
            #{purcQty},
            #{unit},
            #{unitPrice},
            #{exDeliDt},
            #{note},
            #{purcDStatus},
            #{mateCpCd},
            #{currQty}
        )
    </insert>
    
    <!-- 발주서 총액 업데이트 -->
    <update id="updatePurchaseOrderTotalAmount">
        UPDATE purc_ord
        SET ord_total_amount = #{totalAmount}
        WHERE purc_cd = #{purcCd}
    </update>
    
    <!-- MRP 상세 조회 (발주서 생성용) -->
    <select id="selectMrpDetailsByMrpCd" parameterType="String" resultType="MrpDetailVO">
        SELECT 
            mrp_d_cd,
            mcode,
            mate_ver_cd,
            mrp_cd,
            unit,
            required_qty,
            field
        FROM mrp_d
        WHERE mrp_cd = #{mrpCd}
        AND required_qty > 0  -- 부족수량이 있는 자재만
        ORDER BY mcode
    </select>
    
    <!-- 자재별 최저가 공급업체 조회 -->
    <select id="selectBestSupplierByMaterial" resultType="MateSupplierVO">
        SELECT 
            ms.mate_cp_cd,
            ms.mcode,
            ms.mate_ver_cd,
            ms.cp_cd,
            ms.unit_price,
            ms.ltime,
            c.cp_name
        FROM mate_supplier ms
        JOIN company c ON ms.cp_cd = c.cp_cd
        WHERE ms.mcode = #{mcode}
        AND ms.mate_ver_cd = #{mateVerCd}
        AND ms.unit_price = (
            SELECT MIN(unit_price)
            FROM mate_supplier ms2
            WHERE ms2.mcode = #{mcode}
            AND ms2.mate_ver_cd = #{mateVerCd}
        )
        AND ROWNUM = 1  -- 동일한 최저가가 여러 업체인 경우 첫 번째 업체 선택
        ORDER BY ms.ltime ASC  -- 리드타임이 짧은 순으로 정렬 후 첫 번째 선택
    </select>
    
    <!-- 자재 기본정보 조회 -->
    <select id="selectMaterialInfo" resultType="MaterVO">
        SELECT 
            mcode,
            mate_ver_cd,
            mate_name,
            mate_type,
            sto_con,
            unit,
            std,
            piece_unit,
            conver_qty,
            moqty,
            safe_stock,
            edate,
            corigin,
            is_used,
            regi,
            modi,
            cha_rea,
            reg_dt,
            note
        FROM material
        WHERE mcode = #{mcode}
        AND mate_ver_cd = #{mateVerCd}
    </select>
    <!-- 생산계획코드로 최신 MRP 코드 조회 -->
    <select id="selectLatestMrpCdByProdPlan" parameterType="String" resultType="String">
        SELECT mrp_cd
        FROM (
            SELECT mrp_cd, ROW_NUMBER() OVER (ORDER BY plan_gene_dt DESC, mrp_cd DESC) as rn
            FROM mrp
            WHERE produ_plan_cd = #{produPlanCd}
        )
        WHERE rn = 1
    </select>

    <!-- 특정 기간 내 생성된 MRP 목록 조회 (관리용) -->
    <select id="selectMrpListByDateRange" resultType="MrpVO">
        SELECT 
            mrp_cd,
            plan_gene_dt,
            produ_start_dt,
            note,
            regi,
            produ_plan_cd
        FROM mrp
        WHERE plan_gene_dt BETWEEN #{startDate} AND #{endDate}
        ORDER BY plan_gene_dt DESC, mrp_cd DESC
    </select>
    <!-- ================================================ -->
    <!-- 생산계획 등록자 업데이트 -->
    <update id="updateProdPlanRegi">
        UPDATE prod_plan 
        SET mname = #{empCd}
        WHERE produ_plan_cd = #{produPlanCd}
    </update>

    <!-- MRP 등록자 업데이트 -->
    <update id="updateMrpRegi">
        UPDATE mrp
        SET regi = #{empCd}
        WHERE mrp_cd = #{mrpCd}
    </update>

    <!-- 발주서 등록자 업데이트 -->
    <update id="updatePurchaseOrderRegi">
        UPDATE purc_ord
        SET regi = #{empCd}
        WHERE purc_cd = #{purcCd}
    </update>

    <!-- 최근 생성된 발주서 조회 (Oracle ROWNUM 사용) -->
    <select id="getLatestPurchaseOrder" resultType="string">
        SELECT purc_cd 
        FROM (
            SELECT purc_cd 
            FROM purc_ord 
            WHERE purc_status = 'c1'
            AND regi = '시스템'
            ORDER BY ord_dt DESC, purc_cd DESC
        )
        WHERE ROWNUM = 1
    </select>

    <!-- MRP로 생성된 발주서 조회 (Oracle ROWNUM 사용) -->
    <select id="getPurchaseOrderByMrp" parameterType="string" resultType="string">
        SELECT purc_cd
        FROM (
            SELECT DISTINCT po.purc_cd
            FROM purc_ord po
            INNER JOIN purc_ord_d pod ON po.purc_cd = pod.purc_cd
            INNER JOIN mrp_d md ON pod.mcode = md.mcode AND pod.mate_ver_cd = md.mate_ver_cd
            WHERE md.mrp_cd = #{mrpCd}
            AND po.purc_status = 'c1'
            AND pod.note LIKE '%MRP 자동생성%'
            ORDER BY po.ord_dt DESC
        )
        WHERE ROWNUM = 1
    </select>
    <!-- ================================================= -->
</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kimbap.kbs.materials.mapper.StockMovementMapper">

    <!-- 이동요청서 등록 -->
    <insert id="insertMoveRequest" parameterType="com.kimbap.kbs.materials.service.StockMovementVO">
        INSERT INTO move_req (
            move_req_cd,
            move_type,
            move_rea,
            move_status,
            requ,
            req_dt,
            note
        ) VALUES (
            #{moveReqCd},
            #{moveType},
            #{moveRea},
            #{moveStatus},
            #{requ},
            #{reqDt},
            #{note}
        )
    </insert>

    <!-- 이동요청상세 등록 -->
    <insert id="insertMoveRequestDetail" parameterType="com.kimbap.kbs.materials.service.StockMovementVO">
        INSERT INTO move_req_d (
            mrdcode,
            move_req_cd,
            mcode,
            mate_ver_cd,
            pcode,
            prod_ver_cd,
            item_type,
            lot_no,
            move_qty,
            unit,
            depa_ware_cd,
            depa_area_cd,
            arr_ware_cd,
            arr_area_cd
        ) VALUES (
            #{mrdcode},
            #{moveReqCd},
            #{mcode},
            #{mateVerCd},
            #{pcode},
            #{prodVerCd},
            #{itemType},
            #{lotNo},
            #{moveQty},
            #{unit},
            #{depaWareCd},
            #{depaAreaCd},
            #{arrWareCd},
            #{arrAreaCd}
        )
    </insert>

    <!-- 이동요청코드 시퀀스 조회 -->
    <select id="getLastMoveReqSequence" parameterType="string" resultType="int">
        SELECT COALESCE(MAX(TO_NUMBER(SUBSTR(move_req_cd, -3))), 0) as last_seq
        FROM move_req
        WHERE move_req_cd LIKE CONCAT('MR-', #{datePattern}, '-%')
    </select>

    <!-- 이동요청상세코드 시퀀스 조회 -->
    <select id="getLastMoveReqDetailSequence" parameterType="string" resultType="int">
        SELECT COALESCE(MAX(TO_NUMBER(SUBSTR(mrdcode, -3))), 0) as last_seq
        FROM move_req_d
        WHERE mrdcode LIKE CONCAT('MRD-', #{datePattern}, '-%')
    </select>

    <!-- 이동요청 목록 전체 조회 -->
    <select id="getAllMoveRequestList" resultType="com.kimbap.kbs.materials.service.StockMovementVO">
        SELECT 
            mr.move_req_cd,
            mr.move_type,
            mr.move_rea,
            mr.move_status,
            mr.requ,
            mr.req_dt,
            mr.appr,
            mr.app_dt,
            mr.retu_rea,
            mr.note
        FROM move_req mr
        ORDER BY mr.req_dt DESC, mr.move_req_cd DESC
    </select>

    <!-- 이동요청 목록 검색 조회 -->
    <select id="searchMoveRequestList" parameterType="com.kimbap.kbs.materials.service.StockMovementVO" 
            resultType="com.kimbap.kbs.materials.service.StockMovementVO">
        SELECT 
            mr.move_req_cd,
            mr.move_type,
            mr.move_rea,
            mr.move_status,
            mr.requ,
            mr.req_dt,
            mr.appr,
            mr.app_dt,
            mr.retu_rea,
            mr.note
        FROM move_req mr
        WHERE 1=1
        <if test="moveReqCd != null and moveReqCd != ''">
            AND mr.move_req_cd LIKE CONCAT('%', #{moveReqCd}, '%')
        </if>
        <if test="requ != null and requ != ''">
            AND mr.requ = #{requ}
        </if>
        <if test="moveStatus != null and moveStatus != ''">
            AND mr.move_status = #{moveStatus}
        </if>
        <if test="startDate != null and startDate != ''">
            <![CDATA[
            AND mr.req_dt >= TO_DATE(#{startDate}, 'YYYY-MM-DD')
            ]]>
        </if>
        <if test="endDate != null and endDate != ''">
            <![CDATA[
            AND mr.req_dt <= TO_DATE(#{endDate}, 'YYYY-MM-DD') + 1
            ]]>
        </if>
        ORDER BY mr.req_dt DESC, mr.move_req_cd DESC
    </select>

    <!-- 이동요청 단건 조회 -->
    <select id="getMoveRequestById" parameterType="string" resultType="com.kimbap.kbs.materials.service.StockMovementVO">
        SELECT 
            mr.move_req_cd,
            mr.move_type,
            mr.move_rea,
            mr.move_status,
            mr.requ,
            mr.req_dt,
            mr.appr,
            mr.app_dt,
            mr.retu_rea,
            mr.note
        FROM move_req mr
        WHERE mr.move_req_cd = #{moveReqCd}
    </select>

    <!-- 이동요청 상세 목록 조회 -->
    <select id="getMoveRequestDetailList" parameterType="string" resultType="com.kimbap.kbs.materials.service.StockMovementVO">
        SELECT 
            mrd.mrdcode,
            mrd.move_req_cd,
            mrd.mcode,
            mrd.mate_ver_cd,
            mrd.pcode,
            mrd.prod_ver_cd,
            mrd.item_type,
            mrd.lot_no,
            mrd.move_qty,
            mrd.unit,
            mrd.depa_ware_cd,
            mrd.depa_area_cd,
            mrd.arr_ware_cd,
            mrd.arr_area_cd
        FROM move_req_d mrd
        WHERE mrd.move_req_cd = #{moveReqCd}
        ORDER BY mrd.mrdcode
    </select>

    <!-- 재고가 있는 자재 목록 조회 -->
    <select id="getAvailableMaterialList" parameterType="string" resultType="com.kimbap.kbs.materials.service.StockMovementVO">
        SELECT DISTINCT
            mi.mcode,
            mi.mate_ver_cd,
            m.mate_name,
            m.mate_type,
            m.sto_con,
            mi.lot_no,
            ws.qty,
            ws.unit,
            ws.ware_area_cd,
            wd.area_row,
            wd.area_col,
            wd.area_floor,
            w.ware_name,
            f.fac_name
        FROM ware_stock ws
        INNER JOIN mate_inbo mi ON ws.mate_inbo_cd = mi.mate_inbo_cd
        INNER JOIN material m ON mi.mcode = m.mcode AND mi.mate_ver_cd = m.mate_ver_cd
        INNER JOIN ware_d wd ON ws.ware_area_cd = wd.ware_area_cd
        INNER JOIN warehouse w ON wd.wcode = w.wcode AND wd.ware_ver_cd = w.ware_ver_cd
        INNER JOIN factory f ON w.fcode = f.fcode AND w.fac_ver_cd = f.fac_ver_cd
        WHERE f.fcode = #{fcode}
        AND ws.qty > 0
        AND m.is_used = 'f1'
        ORDER BY m.mate_name, mi.lot_no
    </select>

    <!-- 재고가 있는 제품 목록 조회 -->
    <select id="getAvailableProductList" parameterType="string" resultType="com.kimbap.kbs.materials.service.StockMovementVO">
        SELECT DISTINCT
            pi.pcode,
            pi.prod_ver_cd,
            p.prod_name,
            p.prod_type,
            pi.lot_no,
            ws.qty,
            ws.unit,
            ws.ware_area_cd,
            wd.area_row,
            wd.area_col,
            wd.area_floor,
            w.ware_name,
            f.fac_name
        FROM ware_stock ws
        INNER JOIN prod_inbo pi ON ws.prod_inbo_cd = pi.prod_inbo_cd
        INNER JOIN product p ON pi.pcode = p.pcode AND pi.prod_ver_cd = p.prod_ver_cd
        INNER JOIN ware_d wd ON ws.ware_area_cd = wd.ware_area_cd
        INNER JOIN warehouse w ON wd.wcode = w.wcode AND wd.ware_ver_cd = w.ware_ver_cd
        INNER JOIN factory f ON w.fcode = f.fcode AND w.fac_ver_cd = f.fac_ver_cd
        WHERE f.fcode = #{fcode}
        AND ws.qty > 0
        AND p.is_used = 'f1'
        ORDER BY p.prod_name, pi.lot_no
    </select>

    <!-- 특정 품목의 재고 정보 조회 -->
    <select id="getItemStockInfo" resultType="com.kimbap.kbs.materials.service.StockMovementVO">
        <choose>
            <when test="itemType == 'h1' or itemType == 'h2'">
                SELECT 
                    ws.wslcode,
                    ws.ware_area_cd,
                    ws.qty as current_stock,
                    ws.unit,
                    wd.area_row,
                    wd.area_col,
                    wd.area_floor,
                    w.ware_name,
                    f.fac_name,
                    mi.lot_no,
                    mi.mcode,
                    mi.mate_ver_cd,
                    m.mate_name as item_name
                FROM ware_stock ws
                INNER JOIN ware_d wd ON ws.ware_area_cd = wd.ware_area_cd
                INNER JOIN warehouse w ON wd.wcode = w.wcode AND wd.ware_ver_cd = w.ware_ver_cd
                INNER JOIN factory f ON w.fcode = f.fcode AND w.fac_ver_cd = f.fac_ver_cd
                INNER JOIN mate_inbo mi ON ws.mate_inbo_cd = mi.mate_inbo_cd
                INNER JOIN material m ON mi.mcode = m.mcode AND mi.mate_ver_cd = m.mate_ver_cd
                WHERE mi.mcode = #{itemCode}
                AND mi.lot_no = #{lotNo}
                AND ws.qty > 0
            </when>
            <otherwise>
                SELECT 
                    ws.wslcode,
                    ws.ware_area_cd,
                    ws.qty as current_stock,
                    ws.unit,
                    wd.area_row,
                    wd.area_col,
                    wd.area_floor,
                    w.ware_name,
                    f.fac_name,
                    pi.lot_no,
                    pi.pcode,
                    pi.prod_ver_cd,
                    p.prod_name as item_name
                FROM ware_stock ws
                INNER JOIN ware_d wd ON ws.ware_area_cd = wd.ware_area_cd
                INNER JOIN warehouse w ON wd.wcode = w.wcode AND wd.ware_ver_cd = w.ware_ver_cd
                INNER JOIN factory f ON w.fcode = f.fcode AND w.fac_ver_cd = f.fac_ver_cd
                INNER JOIN prod_inbo pi ON ws.prod_inbo_cd = pi.prod_inbo_cd
                INNER JOIN product p ON pi.pcode = p.pcode AND pi.prod_ver_cd = p.prod_ver_cd
                WHERE pi.pcode = #{itemCode}
                AND pi.lot_no = #{lotNo}
                AND ws.qty > 0
            </otherwise>
        </choose>
    </select>

    <!-- 활성화된 공장 목록 조회 -->
    <select id="getActiveFactoryList" resultType="com.kimbap.kbs.materials.service.StockMovementVO">
        SELECT 
            f.fcode,
            f.fac_ver_cd,
            f.fac_name,
            f.address,
            f.tel,
            f.mname,
            f.op_status
        FROM factory f
        WHERE f.op_status = 'r1'
        ORDER BY f.fac_name ASC
    </select>

    <!-- 특정 공장의 창고 목록 조회 -->
    <select id="getWarehousesByFactory" parameterType="string" resultType="com.kimbap.kbs.materials.service.StockMovementVO">
        SELECT 
            w.wcode,
            w.ware_ver_cd,
            w.ware_name,
            w.ware_type,
            w.address,
            w.max_row,
            w.max_col,
            w.max_floor,
            w.fcode,
            w.fac_ver_cd
        FROM warehouse w
        WHERE w.fcode = #{fcode}
        AND w.is_used = 'f1'
        ORDER BY w.ware_type ASC, w.ware_name ASC
    </select>

    <!-- 특정 창고의 구역 목록 조회 -->
    <select id="getAreasByWarehouse" parameterType="string" resultType="com.kimbap.kbs.materials.service.StockMovementVO">
        SELECT 
            wd.ware_area_cd,
            wd.area_row,
            wd.area_col,
            wd.area_floor,
            wd.vol,
            wd.wcode,
            wd.ware_ver_cd,
            COALESCE(stock_sum.current_volume, 0) as current_volume
        FROM ware_d wd
        LEFT JOIN (
            SELECT ware_area_cd, SUM(qty) as current_volume
            FROM ware_stock
            GROUP BY ware_area_cd
        ) stock_sum ON wd.ware_area_cd = stock_sum.ware_area_cd
        WHERE wd.wcode = #{wcode}
        AND wd.is_used = 'f1'
        ORDER BY wd.area_floor ASC, wd.area_row ASC, wd.area_col ASC
    </select>

    <!-- 이동요청 상태 변경 -->
    <update id="updateMoveRequestStatus">
        UPDATE move_req 
        SET move_status = #{moveStatus},
            appr = #{appr},
            app_dt = CURRENT_TIMESTAMP
            <if test="retuRea != null and retuRea != ''">
                , retu_rea = #{retuRea}
            </if>
        WHERE move_req_cd = #{moveReqCd}
    </update>

    <!-- 현재 재고량 조회 -->
    <select id="getCurrentStock" resultType="int">
        <choose>
            <when test="itemType == 'h1' or itemType == 'h2'">
                SELECT COALESCE(SUM(ws.qty), 0) as current_stock
                FROM ware_stock ws
                INNER JOIN mate_inbo mi ON ws.mate_inbo_cd = mi.mate_inbo_cd
                WHERE ws.ware_area_cd = #{wareAreaCd}
                AND mi.mcode = #{itemCode}
                AND mi.lot_no = #{lotNo}
            </when>
            <otherwise>
                SELECT COALESCE(SUM(ws.qty), 0) as current_stock
                FROM ware_stock ws
                INNER JOIN prod_inbo pi ON ws.prod_inbo_cd = pi.prod_inbo_cd
                WHERE ws.ware_area_cd = #{wareAreaCd}
                AND pi.pcode = #{itemCode}
                AND pi.lot_no = #{lotNo}
            </otherwise>
        </choose>
    </select>

    <!-- 도착지 구역 적재 가능 여부 검증 -->
    <select id="validateDestinationArea" resultType="map">
        <![CDATA[
        SELECT 
            wd.vol as max_volume,
            COALESCE(SUM(ws.qty), 0) as current_volume,
            CASE 
                WHEN (wd.vol - COALESCE(SUM(ws.qty), 0)) >= #{moveQty} THEN 'Y'
                ELSE 'N'
            END as is_valid
        FROM ware_d wd
        LEFT JOIN ware_stock ws ON wd.ware_area_cd = ws.ware_area_cd
        WHERE wd.ware_area_cd = #{wareAreaCd}
        GROUP BY wd.ware_area_cd, wd.vol
        ]]>
    </select>

    <!-- 사용자 정보 조회 -->
    <select id="getUserInfo" parameterType="string" resultType="com.kimbap.kbs.materials.service.StockMovementVO">
        SELECT 
            emp_cd,
            emp_name,
            dept_name,
            position,
            phone,
            email
        FROM employee
        WHERE emp_cd = #{empCd}
    </select>

    <!-- 자재 정보 조회 -->
    <select id="getMaterialInfo" resultType="com.kimbap.kbs.materials.service.StockMovementVO">
        SELECT 
            m.mcode,
            m.mate_ver_cd,
            m.mate_name,
            m.mate_type,
            m.sto_con,
            m.unit,
            m.std,
            m.piece_unit,
            m.conver_qty,
            m.moqty,
            m.safe_stock,
            m.edate,
            m.corigin,
            m.is_used
        FROM material m
        WHERE m.mcode = #{mcode}
        AND m.mate_ver_cd = #{mateVerCd}
        AND m.is_used = 'f1'
    </select>

    <!-- 제품 정보 조회 -->
    <select id="getProductInfo" resultType="com.kimbap.kbs.materials.service.StockMovementVO">
        SELECT 
            p.pcode,
            p.prod_ver_cd,
            p.prod_name,
            p.prod_type,
            p.unit,
            p.std,
            p.piece_unit,
            p.conver_qty,
            p.safestock,
            p.edate,
            p.is_used
        FROM product p
        WHERE p.pcode = #{pcode}
        AND p.prod_ver_cd = #{prodVerCd}
        AND p.is_used = 'f1'
    </select>

    <!-- 창고 정보 조회 -->
    <select id="getWarehouseInfo" resultType="com.kimbap.kbs.materials.service.StockMovementVO">
        SELECT 
            w.wcode,
            w.ware_ver_cd,
            w.ware_name,
            w.ware_type,
            w.address,
            w.max_row,
            w.max_col,
            w.max_floor,
            w.fcode,
            w.fac_ver_cd,
            f.fac_name
        FROM warehouse w
        INNER JOIN factory f ON w.fcode = f.fcode AND w.fac_ver_cd = f.fac_ver_cd
        WHERE w.wcode = #{wcode}
        AND w.ware_ver_cd = #{wareVerCd}
        AND w.is_used = 'f1'
    </select>

    <!-- 구역 정보 조회 -->
    <select id="getAreaInfo" parameterType="string" resultType="com.kimbap.kbs.materials.service.StockMovementVO">
        SELECT 
            wd.ware_area_cd,
            wd.area_row,
            wd.area_col,
            wd.area_floor,
            wd.vol,
            wd.wcode,
            wd.ware_ver_cd,
            w.ware_name,
            f.fac_name,
            COALESCE(stock_sum.current_volume, 0) as current_volume
        FROM ware_d wd
        INNER JOIN warehouse w ON wd.wcode = w.wcode AND wd.ware_ver_cd = w.ware_ver_cd
        INNER JOIN factory f ON w.fcode = f.fcode AND w.fac_ver_cd = f.fac_ver_cd
        LEFT JOIN (
            SELECT ware_area_cd, SUM(qty) as current_volume
            FROM ware_stock
            GROUP BY ware_area_cd
        ) stock_sum ON wd.ware_area_cd = stock_sum.ware_area_cd
        WHERE wd.ware_area_cd = #{wareAreaCd}
    </select>

    <!-- 이동요청 상태별 건수 조회 -->
    <select id="getMoveRequestStatusCount" resultType="map">
        SELECT 
            move_status,
            COUNT(*) as count
        FROM move_req
        GROUP BY move_status
    </select>

    <!-- 월별 이동요청 건수 조회 -->
    <select id="getMonthlyMoveRequestCount" parameterType="string" resultType="map">
        SELECT 
            TO_CHAR(req_dt, 'MM') as month,
            COUNT(*) as count
        FROM move_req
        WHERE TO_CHAR(req_dt, 'YYYY') = #{year}
        GROUP BY TO_CHAR(req_dt, 'MM')
        ORDER BY month
    </select>

</mapper>